sum(c(0.5,0.7,0.9,0.9))/4
0.5 * 0.7 * 0.9 * 0.9
(0.5 * 0.7 * 0.9 * 0.9)^(1/4)
1/0.5 + 1/0.7 + 1/0.9 + 1/0.9
(1/0.5 + 1/0.7 + 1/0.9 + 1/0.9)
4 / (1/0.5 + 1/0.7 + 1/0.9 + 1/0.9)
0.5^2 + 0.7^2 + 0.9^2 + 0.9^2
(0.5^2 + 0.7^2 + 0.9^2 + 0.9^2)/4
sqrt((0.5^2 + 0.7^2 + 0.9^2 + 0.9^2)/4)
(0.5^2 + 0.7^2 + 0.9^2 + 0.9^2)/4
((0.5^2 + 0.7^2 + 0.9^2 + 0.9^2)/4)^(1/2)
((0.5^3 + 0.7^3 + 0.9^3 + 0.9^3)/4)^(1/3)
ceiling(0.5)
suppressMessages(library("data.table"))
eval <- readRDS("C:/Users/jespe/Downloads/eval.Rds")
eval$integrate
eval$integrate_result
devtools::install_github("madsen-lab/valiDrops", auth_token = "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")
library(scry)
library(SeuratData)
data(panc8)
panc8
panc8@assays$RNA@counts
tmp <- scry::devianceFeatureSelection(panc8@assays$RNA@counts)
rank.pass <- c("A","B")
if (length(rank.pass) > 20000) {
message("More than 20.000 barcodes passed initial filtering. It is like that breakpoint estimation did not work satisfactorily.")
}
rank.pass <- rnorm(20001)
length(rank.pass)
if (length(rank.pass) > 20000) {
message("More than 20.000 barcodes passed initial filtering. It is like that breakpoint estimation did not work satisfactorily.")
}
if (length(rank.pass) > 20000) {
message("More than 20.000 barcodes passed initial filtering. It is like that breakpoint estimation did not work satisfactorily. You can try to increase alpha, alpha.max and/or psi.max in the rank_barcodes() function.")
}
library(segmented)
rnorm(100)
order(rnorm(100))
sort(rnorm(100))
plot(sort(rnorm(100)))
data <- sort(rnorm(100))
y <- seq(1, 100, 1)
model <- lm(y ~ data)
model
segmented(model)
out <- tryCatch(suppressWarnings(segmented::segmented(model, psi = seq(quantile(x, prob = 0.2),quantile(x, prob = (1-0.2)), length.out = psi), control = segmented::seg.control(alpha = (0.2-(0.2/1000)), n.boot = 10))), error = function(e) e)
out
out <- tryCatch(suppressWarnings(segmented::segmented(model, psi = seq(quantile(data, prob = 0.2),quantile(data, prob = (1-0.2)), length.out = psi), control = segmented::seg.control(alpha = (0.2-(0.2/1000)), n.boot = 10))), error = function(e) e)
out
psi <- 2
out <- tryCatch(suppressWarnings(segmented::segmented(model, psi = seq(quantile(data, prob = 0.2),quantile(data, prob = (1-0.2)), length.out = psi), control = segmented::seg.control(alpha = (0.2-(0.2/1000)), n.boot = 10))), error = function(e) e)
out
psi <- 3
out
out
?segmented()
install.packages("CVXR")
library(CVXR)
x = matrix(c(1,2,3,6,4,4), ncol=2)
## Linear regression using CVXR
y = c(0.1,0.2,0.3)
x
y
lm(y ~ x)
x = matrix(c(1,3,2,1,5,2), ncol=2)
lm(y ~ x)
model <- lm(y ~ x)
c(0.35, -0.15)
x%*% c(0.35, -0.15)
x %*% c(0.35, -0.15)
## Linear regression using CVXR
y = matrix(c(0.1,0.2,0.3,0.15,0.15,0.3))
x = matrix(c(1,3,2,1,5,2), ncol=2)
model <- lm(y ~ x)
x %*% c(0.35, -0.15)
matrix(c(0.35,-0.15,0.3,-0.15))
matrix(c(0.35,-0.15,0.3,-0.15), ncol=2)
x %*% matrix(c(0.35,-0.15,0.3,-0.15), ncol=2)
mat <- Variable(2, 2)
obj <- objective(Minimize(sum_squares(y - x %*% mat)))
y
## Linear regression using CVXR
y = matrix(c(0.1,0.2,0.3,0.15,0.15,0.3), ncol=2)
y
obj <- objective(Minimize(sum_squares(y - x %*% mat)))
obj <- Minimize(sum_squares(y - x %*% mat))
problem <- Problem(objective)
problem <- Problem(obj)
result <- solve(problem)
result
result$value
result$getValue(mat)
mat <- matrix(c(25,-11,0.03,-0.015),ncol=2)
mat
x %*% mat
weights <- Variable(2,2)
obj <- Minimize(sum_squares(y - (x * weights) %*% mat))
x
weights <- Variable(3,2)
obj <- Minimize(sum_squares(y - (x * weights) %*% mat))
weights <- Variable(nrow(x),ncol(x))
obj <- Minimize(sum_squares(y - (x * weights) %*% mat))
problem <- Problem(obj)
result <- solve(problem)
result$getValue(mat)
result$getValue(weights)
y - (x * weights) %*% mat
(x * result$getValue(weights))
(x * result$getValue(weights)) %*% mat
weights <- Variable(nrow(x),1)
obj <- Minimize(sum_squares(y - (x * weights) %*% mat))
weights <- Variable(nrow(x))
obj <- Minimize(sum_squares(y - (x * weights) %*% mat))
rnorm(3)
x * rnorm(3)
x
c(1,2,3)
x * c(1,2,3)
x %*% c(1,2,3)
x %*% matrix(c(1,2,3))
x %*% matrix(c(1,2,3), ncol=1)
t(x) %*% matrix(c(1,2,3), ncol=1)
mat <- matrix(c(25,-11,0.03,-0.015),ncol=2)
weights <- Variable(rows = nrow(x), cols = 1)
obj <- Minimize(sum_squares(y - (x + weights) %*% mat))
problem <- Problem(obj)
result <- solve(problem)
result$getValue(weights)
y = matrix(c(0.1,0.2,0.3,0.15,0.15,0.3), ncol=2)
x = matrix(c(1,3,2,1,5,2), ncol=2)
model <- lm(y ~ x)
x %*% matrix(c(0.35,-0.15,0.3,-0.15), ncol=2)
mat <- matrix(c(25,-11,0.03,-0.015),ncol=2)
weights <- Variable(rows = nrow(x), cols = 1)
obj <- Minimize(sum_squares(y - ((x + weights) %*% mat))
problem <- Problem(obj)
result <- solve(problem)
result$getValue(weights)
y = matrix(c(0.1,0.2,0.3,0.15,0.15,0.3), ncol=2)
x = matrix(c(1,3,2,1,5,2), ncol=2)
model <- lm(y ~ x)
x %*% matrix(c(0.35,-0.15,0.3,-0.15), ncol=2)
mat <- matrix(c(25,-11,0.03,-0.015),ncol=2)
weights <- Variable(rows = nrow(x), cols = 1)
obj <- Minimize(sum_squares(y - ((x + weights) %*% mat)))
problem <- Problem(obj)
result <- solve(problem)
result$getValue(weights)
mat
obj <- Minimize(sum_squares(y - (weights * x %*% mat)))
weights <- Variable(rows = nrow(x), cols = 1)
obj <- Minimize(sum_squares(y - (multiply(weights,x) %*% mat)))
weights <- Variable(rows = 3, cols = 1)
obj <- Minimize(sum_squares(y - (multiply(weights,x) %*% mat)))
curvature(weights)
curvature(x)
obj <- Minimize(sum_squares(y - (x/weights %*% mat)))
obj <- Minimize(sum_squares(y - (x/weights %*% mat)))
weights <- Variable(rows = 1, cols = 3)
obj <- Minimize(sum_squares(y - (x/weights %*% mat)))
x
x / c(1,2,3)
obj <- Minimize(sum_squares(y - (weights/x %*% mat)))
weights <- Variable(rows = 3, cols = 1)
obj <- Minimize(sum_squares(y - (weights/x %*% mat)))
weights <- Variable(rows = 1, cols = 3)
obj <- Minimize(sum_squares(y - (weights/x %*% mat)))
dim(x)
weights <- Variable(rows = 3, cols = 2)
obj <- Minimize(sum_squares(y - (weights/x %*% mat)))
obj <- Minimize(sum_squares(y - (conv(weights,x) %*% mat)))
c(1,2,3)
diag(c(1,2,3))
mat %*% diag(c(1,2,3))
t(mat) %*% diag(c(1,2,3))
t(mat)
x %*% diag(c(1,2,3))
t(x) %*% diag(c(1,2,3))
t(t(x) %*% diag(c(1,2,3)))
x * c(1,2,3)
weights <- Variable(rows = 3, cols = 1)
obj <- Minimize(sum_squares(y - (t(t(x) %*% diag(weights)) %*% mat)))
problem <- Problem(obj)
result <- solve(problem)
result$getValue(weights)
result$getValue(weights) * x
x * result$getValue(weights)
x
x %*% diag(result$getValue(weights))
t(x) %*% diag(result$getValue(weights))
diag(result$getValue(weights))
result$getValue(weights)
result$getValue(weights)[,1]
x * result$getValue(weights)[,1]
(x * result$getValue(weights)[,1]) %*% mat
y - (x * result$getValue(weights)[,1]) %*% mat
(y - (x * result$getValue(weights)[,1]) %*% mat)^2
sum((y - (x * result$getValue(weights)[,1]) %*% mat)^2)
dim(y)
y
weights <- Variable(rows = 3, cols = 1)
obj <- Minimize(sum_squares(t(t(y) %*% diag(weights)) - (x %*% mat)))
problem <- Problem(obj)
result <- solve(problem)
result$getValue(weights)
c(0.1,0.2)
y %*% diag(c(0.1,0.2))
y
y %*% diag(c(1,2))
y
weights <- Variable(rows = 1, cols = 2)
obj <- Minimize(sum_squares((y %*% diag(weights)) - (x %*% mat)))
problem <- Problem(obj)
result <- solve(problem)
result$getValue(weights)
weights
y %*% diag(result$getValue(weights)[,1])
y %*% diag(result$getValue(weights)[1,])
y %*% diag(result$getValue(weights)[1,]) - (x %*% mat)
(y %*% diag(result$getValue(weights)[1,])) - (x %*% mat)
(y %*% diag(result$getValue(weights)[1,])) - (x %*% mat)^2
sum((y %*% diag(result$getValue(weights)[1,])) - (x %*% mat)^2)
y - (x %*% mat)^2
y - (x %*% mat)^2
(y - (x %*% mat))^2
sum((y - (x %*% mat))^2)
(y %*% diag(result$getValue(weights)[1,])) - (x %*% mat)))^2
(y %*% diag(result$getValue(weights)[1,])) - (x %*% mat))^2
(y %*% diag(result$getValue(weights)[1,])) - (x %*% mat)^2
(y %*% diag(result$getValue(weights)[1,])) - (x %*% mat)
y %*% diag(result$getValue(weights)[1,])) - (x %*% mat)
y %*% diag(result$getValue(weights)[1,])) - (x %*% mat)
(y %*% diag(result$getValue(weights)[1,])) - (x %*% mat)
((y %*% diag(result$getValue(weights)[1,])) - (x %*% mat))
((y %*% diag(result$getValue(weights)[1,])) - (x %*% mat))^2
sum(((y %*% diag(result$getValue(weights)[1,])) - (x %*% mat))^2)
weights <- Variable(rows = 1, cols = 2)
obj <- Minimize(sum_squares(y - ((x %*% diag(weights)) %*% mat)))
problem <- Problem(obj)
result <- solve(problem)
result$getValue(weights)
weights <- Variable(rows = 3, cols = 2)
obj <- Minimize(sum_squares((y * weights) - (x %*% mat)))
problem <- Problem(obj)
result <- solve(problem)
result$getValue(weights)
(y * weights)
result$getValue(weights)
y * result$getValue(weights)
y * result$getValue(weights) - (x %*% mat)
(y * result$getValue(weights) - (x %*% mat))
(y * result$getValue(weights) - (x %*% mat))^2
sum((y * result$getValue(weights) - (x %*% mat))^2)
obj <- Minimize(sum_squares((y * weights) - (x %*% mat)) + norm1(weights))
weights <- Variable(rows = 3, cols = 2)
obj <- Minimize(sum_squares((y * weights) - (x %*% mat)) + norm1(weights))
problem <- Problem(obj)
result <- solve(problem)
result$getValue(weights)
problem <- Problem(obj, constraints = list(weights >= 0))
result <- solve(problem)
result$getValue(weights)
props <- Variable(rows = 2, cols = 2)
weights <- Variable(rows = 3, cols = 2)
props <- Variable(rows = 2, cols = 2)
obj <- Minimize(sum_squares((y * weights) - (x %*% props)) + norm1(weights))
problem <- Problem(obj, constraints = list(weights >= 0, props >= props, sum_entries(props, axis = 2) == 1))
result <- solve(problem)
result$getValue(weights)
weights <- Variable(rows = 3, cols = 2)
props <- Variable(rows = 2, cols = 2)
obj <- Minimize(sum_squares((y * weights) - (x %*% props)) + sum_squares(mat - props))
problem <- Problem(obj, constraints = list(weights >= 0, props >= props, sum_entries(props, axis = 2) == 1))
result <- solve(problem)
result$getValue(weights)
result$getValue(props)
weights <- Variable(rows = 3, cols = 2)
props <- Variable(rows = 2, cols = 2)
obj <- Minimize(sum_squares((y * weights) - (x %*% props)) + sum_squares(mat - props))
problem <- Problem(obj, constraints = list(weights >= 0, props >= 0, sum_entries(props, axis = 2) == 1))
result <- solve(problem)
result$getValue(weights)
result$getValue(props)
colSums(props)
colSums(result$getValue(props))
mat
mat <- matrix(c(0.4,0.6,0.2,0.8),ncol=2) # Observed frequency matrix
mat
weights <- Variable(rows = 3, cols = 2)
props <- Variable(rows = 2, cols = 2)
obj <- Minimize(sum_squares((y * weights) - (x %*% props)) + sum_squares(mat - props))
problem <- Problem(obj, constraints = list(weights >= 0, props >= 0, sum_entries(props, axis = 2) == 1))
result <- solve(problem)
result$getValue(weights)
result$getValue(props)
weights <- Variable(rows = 3, cols = 1)
props <- Variable(rows = 2, cols = 2)
obj <- Minimize(sum_squares(y - (t(t(x) %*% diag(weights)) %*% props)) + sum_squares(mat - props))
problem <- Problem(obj, constraints = list(weights >= 0, props >= 0, sum_entries(props, axis = 2) == 1))
result <- solve(problem)
result$getValue(props)
weights <- Variable(rows = 3, cols = 1)
props <- Variable(rows = 2, cols = 2)
obj <- Minimize(sum_squares(t(t(y) %*% diag(weights)) - (x %*% props)) + sum_squares(mat - props))
problem <- Problem(obj, constraints = list(weights >= 0, props >= 0, sum_entries(props, axis = 2) == 1))
result <- solve(problem)
result$getValue(weights)
weights <- Variable(rows = 3, cols = 1)
props <- Variable(rows = 2, cols = 2)
obj <- Minimize(sum_squares(t(t(y) %*% diag(weights)) - (x %*% props)) + sum_squares(mat - props))
problem <- Problem(obj, constraints = list(weights >= 0, props >= 0, sum_entries(props, axis = 2) == 1))
result <- solve(problem)
result$getValue(props)
weights <- Variable(rows = 1, cols = 2)
props <- Variable(rows = 2, cols = 2)
obj <- Minimize(sum_squares((y %*% diag(weights)) - (x %*% props)) + sum_squares(mat - props))
problem <- Problem(obj, constraints = list(weights >= 0, props >= 0, sum_entries(props, axis = 2) == 1))
result <- solve(problem)
result$getValue(weights)
weights <- Variable(rows = 1, cols = 2)
props <- Variable(rows = 2, cols = 2)
obj <- Minimize(sum_squares((y %*% diag(weights)) - (x %*% props)) + sum_squares(mat - props))
problem <- Problem(obj, constraints = list(weights >= 0, props >= 0, sum_entries(props, axis = 2) == 1))
result <- solve(problem)
result$getValue(props)
weights <- Variable(rows = 1, cols = 2)
props <- Variable(rows = 2, cols = 2)
obj <- Minimize(sum_squares(y - ((x %*% diag(weights)) %*% props)) + sum_squares(mat - props))
problem <- Problem(obj, constraints = list(weights >= 0, props >= 0, sum_entries(props, axis = 2) == 1))
result <- solve(problem)
result$getValue(weights)
### Learning gene weights (on pseudo-bulk)
weights <- Variable(rows = 3, cols = 1)
props <- Variable(rows = 2, cols = 2)
obj <- Minimize(sum_squares(t(t(y) %*% diag(weights)) - (x %*% props)) + sum_squares(mat - props))
problem <- Problem(obj, constraints = list(weights >= 0, props >= 0, sum_entries(props, axis = 2) == 1))
result <- solve(problem)
result$getValue(props)
### Learning sample weights
weights <- Variable(rows = 1, cols = 2)
props <- Variable(rows = 2, cols = 2)
obj <- Minimize(sum_squares((y %*% diag(weights)) - (x %*% props)) + sum_squares(mat - props))
problem <- Problem(obj, constraints = list(weights >= 0, props >= 0, sum_entries(props, axis = 2) == 1))
result <- solve(problem)
result$getValue(props)
weights <- Variable(rows = 3, cols = 1)
props <- Variable(rows = 2, cols = 2)
obj <- Minimize(sum_squares(y - (t(t(x) %*% diag(weights)) %*% props)) + sum_squares(mat - props))
problem <- Problem(obj, constraints = list(weights >= 0, props >= 0, sum_entries(props, axis = 2) == 1))
result <- solve(problem)
result$getValue(props)
### Learning gene weights (on pseudo-bulk)
weights <- Variable(rows = 3, cols = 1)
props <- Variable(rows = 2, cols = 2)
obj <- Minimize(sum_squares(t(t(y) %*% diag(weights)) - (x %*% props)) + sum_squares(mat - props))
problem <- Problem(obj, constraints = list(weights >= 0, props >= 0, sum_entries(props, axis = 2) == 1))
result <- solve(problem)
result$getValue(props)
### Learning sample weights
weights <- Variable(rows = 1, cols = 2)
props <- Variable(rows = 2, cols = 2)
obj <- Minimize(sum_squares((y %*% diag(weights)) - (x %*% props)) + sum_squares(mat - props))
problem <- Problem(obj, constraints = list(weights >= 0, props >= 0, sum_entries(props, axis = 2) == 1))
result <- solve(problem)
result$getValue(props)
### Learning weights
## Full weight matrix
weights <- Variable(rows = 3, cols = 2)
props <- Variable(rows = 2, cols = 2)
obj <- Minimize(sum_squares((y * weights) - (x %*% props)) + sum_squares(mat - props))
problem <- Problem(obj, constraints = list(weights >= 0, props >= 0, sum_entries(props, axis = 2) == 1))
result <- solve(problem)
result$getValue(weights)
result$getValue(props)
y %in% mat
y %*% mat
y
weights <- Variable(rows = 1, cols = 2)
props <- Variable(rows = 2, cols = 2)
obj <- Minimize(sum_squares((y %*% diag(weights)) - (x %*% props)) + sum_squares(mat - props))
problem <- Problem(obj, constraints = list(weights >= 0, props >= 0, sum_entries(props, axis = 2) == 1))
result <- solve(problem)
result$getValue(props)
weights <- Variable(rows = 3, cols = 1)
props <- Variable(rows = 2, cols = 2)
obj <- Minimize(sum_squares(t(t(y) %*% diag(weights)) - (x %*% props)) + sum_squares(mat - props))
problem <- Problem(obj, constraints = list(weights >= 0, props >= 0, sum_entries(props, axis = 2) == 1))
result <- solve(problem)
result$getValue(props)
mat
y <- y %*% mat
weights <- Variable(rows = 3, cols = 1)
props <- Variable(rows = 2, cols = 2)
obj <- Minimize(sum_squares(t(t(y) %*% diag(weights)) - (x %*% props)) + sum_squares(mat - props))
problem <- Problem(obj, constraints = list(weights >= 0, props >= 0, sum_entries(props, axis = 2) == 1))
result <- solve(problem)
result$getValue(props)
weights <- Variable(rows = 1, cols = 2)
props <- Variable(rows = 2, cols = 2)
obj <- Minimize(sum_squares((y %*% diag(weights)) - (x %*% props)) + sum_squares(mat - props))
problem <- Problem(obj, constraints = list(weights >= 0, props >= 0, sum_entries(props, axis = 2) == 1))
result <- solve(problem)
result$getValue(props)
weights <- Variable(rows = 3, cols = 2)
props <- Variable(rows = 2, cols = 2)
obj <- Minimize(sum_squares((y * weights) - (x %*% props)) + sum_squares(mat - props))
problem <- Problem(obj, constraints = list(weights >= 0, props >= 0, sum_entries(props, axis = 2) == 1))
result <- solve(problem)
result$getValue(weights)
result$getValue(props)
weights <- Variable(rows = 3, cols = 2)
props <- Variable(rows = 2, cols = 2)
obj <- Minimize(sum_squares((y * weights) - (x %*% props)) + sum_squares(mat - props))
problem <- Problem(obj, constraints = list(weights >= 0, sum_entries(weights, axis = 1) == 1), props >= 0, sum_entries(props, axis = 2) == 1))
result <- solve(problem)
result$getValue(weights)
result$getValue(props)
problem <- Problem(obj, constraints = list(weights >= 0, sum_entries(weights, axis = 1) == 1, props >= 0, sum_entries(props, axis = 2) == 1))
result <- solve(problem)
result$getValue(weights)
result$getValue(props)
problem <- Problem(obj, constraints = list(weights >= 0, sum_entries(weights, axis = 2) == 1, props >= 0, sum_entries(props, axis = 2) == 1))
result <- solve(problem)
result$getValue(weights)
result$getValue(props)
weights <- Variable(rows = 3, cols = 2)
props <- Variable(rows = 2, cols = 2)
obj <- Minimize(sum_squares((y * weights) - (x %*% props)) + sum_squares(mat - props))
problem <- Problem(obj, constraints = list(weights >= 0, sum_entries(weights, axis = 2) == 1, props >= 0, sum_entries(props, axis = 2) == 1))
result <- solve(problem)
result$getValue(weights)
result$getValue(props)
weights <- Variable(rows = 3, cols = 2)
props <- Variable(rows = 2, cols = 2)
obj <- Minimize(sum_squares((y * weights) - (x %*% props)) + norm1(weights) + sum_squares(mat - props))
problem <- Problem(obj, constraints = list(weights >= 0, props >= 0, sum_entries(props, axis = 2) == 1))
result <- solve(problem)
result$getValue(weights)
result$getValue(props)
weights <- Variable(rows = 3, cols = 2)
props <- Variable(rows = 2, cols = 2)
obj <- Minimize(sum_squares((y * weights) - (x %*% props)) + norm2(weights) + sum_squares(mat - props))
problem <- Problem(obj, constraints = list(weights >= 0, props >= 0, sum_entries(props, axis = 2) == 1))
result <- solve(problem)
result$getValue(weights)
result$getValue(props)
weights <- Variable(rows = 3, cols = 2)
props <- Variable(rows = 2, cols = 2)
obj <- Minimize(sum_squares((y * weights) - (x %*% props)) + sum_squares(mat - props))
problem <- Problem(obj, constraints = list(weights >= 0, props >= 0, sum_entries(props, axis = 2) == 1))
result <- solve(problem)
result$getValue(weights)
result$getValue(props)
x
y
setwd("~/OneDrive - Syddansk Universitet/Teaching/2023/BMB511/Exercises/Swirl/BMB511")
library(swirlify)
search()
install.packages("rlang")
install.packages("rlang")
library(rlang)
install.packages("vroom")
library(swirlify)
setwd("~/OneDrive - Syddansk Universitet/Teaching/2023/BMB511/Exercises/Swirl/BMB511")
set_lesson()
counts <- read.delim("RNA_seq/RNAseq_counts_GSE135092.txt", sep=" ")
metadata <- read.delim("RNA_seq/RNAseq_metadata_GSE135092.txt", sep = " ")
Metadata <- metadata
Metadata <- Metadata[Metadata$Tissue == "Retina_Macula" | Metadata$Tissue == "RPE_Macula", ]
Counts <- counts
Counts <- Counts[, colnames(Counts) %in% Metadata$Sample]
Metadata[Metadata$Tissue == "Retina_Macula", "Tissue"] <- "Retina"
Metadata[Metadata$Tissue == "RPE_Macula", "Tissue"] <- "RPE"
haed(Metadata)
head(Metadata)
Metadata$Combined <- paste(Metadata$Tissue, Metadata$Condition, sep = "_")
Metadata$Combined <- factor(Metadata$Combined, levels = c("Retina_Control", "Retina_AMD", "RPE_Control", "RPE_AMD"))
head(Metadata)
write.table(Metadata, file = "RNA_seq/RNAseq_metadata_GSE135092.txt", quote = FALSE, sep = "\t", col.names = TRUE, row.names = FALSE)
write.table(Counts, file = "RNA_seq/RNAseq_counts_GSE135092.txt", quote = FALSE, sep = "\t", col.names = TRUE, row.names = FALSE)
head(metadata)
head(Metadata)
metadata <- Metadata
table(metadata$Combined)
table(metadata$Condition)
hehad(counts)
counts <- Counts
head(counts)
identical(colnames(counts), metadata$Sample)
?identical
?model.matrix
?DESeqDataSetFromMatrix
library(DEseq2)
install.packages("DESeq2")
~ a
c <- ~ a
c
class(c)
?DESeqDataSetFromMatrix
?boxplot
colnames(metadata)
metadata <- metadata[,1:3]
colnames(metadata) <- c("sample","tissue", "condition")
counts <- counts[, colnames(counts) %in% metadata$sample]
counts <- counts[, match(metadata$sample, colnames(counts))]
head(metadata)
metadata <- metadata[ metadata$tissue == "Retina",]
counts <- counts[, colnames(counts) %in% metadata$sample]
counts <- counts[, match(metadata$sample, colnames(counts))]
write.table(counts, file = "RNA_seq/RNAseq_counts.txt", quote = FALSE, sep = "\t", col.names = TRUE, row.names = FALSE)
write.table(metadata, file = "RNA_seq/RNAseq_metadata.txt", quote = FALSE, sep = "\t", col.names = TRUE, row.names = FALSE)
