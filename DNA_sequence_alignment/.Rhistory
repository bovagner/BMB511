testA <- glmLRT(fit, contrast = c(-1,1,0))
head(testA)
topTags(testA)
out <- topTags(testA, n = nrow(pb), sort.by = "none")
outA <- topTags(testA, n = nrow(pb), sort.by = "none")
head(outA)
outA <- as.data.frame(topTags(testA, n = nrow(pb), sort.by = "none"))
head(outA)
DGE <- DGEList(counts = pb[, colnames(pb) %in% md[ md$V5 == "CLSTN2+ Adipocyte",1]], group = md[ md$V5 == "CLSTN2+ Adipocyte",4])
DGE <- calcNormFactors(DGE)
mm <- model.matrix(~ factor(md[ md$V5 == "CLSTN2+ Adipocyte",4]) + factor(md[ md$V5 == "CLSTN2+ Adipocyte",2]) + 0)
DGE <- estimateDisp(DGE, design = mm)
fit <- glmFit(DGE,mm)
testA <- glmLRT(fit, contrast = c(-1,1,0))
outB <- as.data.frame(topTags(testA, n = nrow(pb), sort.by = "none"))
DGE <- DGEList(counts = pb[, colnames(pb) %in% md[ md$V5 == "DCN+ Adipocyte",1]], group = md[ md$V5 == "DCN+ Adipocyte",4])
DGE <- calcNormFactors(DGE)
mm <- model.matrix(~ factor(md[ md$V5 == "DCN+ Adipocyte",4]) + factor(md[ md$V5 == "DCN+ Adipocyte",2]) + 0)
DGE <- estimateDisp(DGE, design = mm)
fit <- glmFit(DGE,mm)
testA <- glmLRT(fit, contrast = c(-1,1,0))
outC <- as.data.frame(topTags(testA, n = nrow(pb), sort.by = "none"))
DGE <- DGEList(counts = pb[, colnames(pb) %in% md[ md$V5 == "DGAT2+ Adipocyte",1]], group = md[ md$V5 == "DGAT2+ Adipocyte",4])
DGE <- calcNormFactors(DGE)
mm <- model.matrix(~ factor(md[ md$V5 == "DGAT2+ Adipocyte",4]) + factor(md[ md$V5 == "DGAT2+ Adipocyte",2]) + 0)
DGE <- estimateDisp(DGE, design = mm)
fit <- glmFit(DGE,mm)
testA <- glmLRT(fit, contrast = c(-1,1,0))
outD <- as.data.frame(topTags(testA, n = nrow(pb), sort.by = "none"))
outA[ abs(outA$logFC) >= log2(1.5) & outA$FDR <= 0.05,]
rownames(outA[ abs(outA$logFC) >= log2(1.5) & outA$FDR <= 0.05,])
c(
rownames(outA[ abs(outA$logFC) >= log2(1.5) & outA$FDR <= 0.05,]),
rownames(outB[ abs(outB$logFC) >= log2(1.5) & outB$FDR <= 0.05,]),
rownames(outC[ abs(outC$logFC) >= log2(1.5) & outC$FDR <= 0.05,]),
rownames(outD[ abs(outD$logFC) >= log2(1.5) & outD$FDR <= 0.05,])
)
genes <- c(
rownames(outA[ abs(outA$logFC) >= log2(1.5) & outA$FDR <= 0.05,]),
rownames(outB[ abs(outB$logFC) >= log2(1.5) & outB$FDR <= 0.05,]),
rownames(outC[ abs(outC$logFC) >= log2(1.5) & outC$FDR <= 0.05,]),
rownames(outD[ abs(outD$logFC) >= log2(1.5) & outD$FDR <= 0.05,])
)
DGE <- DGEList(counts = pb, group = md$V5)
DGE <- calcNormFactors(DGE)
norm <- as.data.frame(cpm(DGE, normalized.lib.sizes = TRUE, log = TRUE, prior.count = 1))
norm <- norm[ , order(md$V5, md$V2, md$V4)]
norm_sub <- norm[ rownames(norm) %in% genes,]
dim(norm_sub)
head(norm)
Heatmap(t(scale(t(norm_sub))), cluster_columns = FALSE)
norm <- as.data.frame(cpm(DGE, normalized.lib.sizes = TRUE, log = TRUE, prior.count = 1))
norm <- norm[ , order(md$V5, md$V4, md$V2)]
Heatmap(t(scale(t(norm_sub))), cluster_columns = FALSE)
head(md)
norm <- as.data.frame(cpm(DGE, normalized.lib.sizes = TRUE, log = TRUE, prior.count = 1))
norm <- norm[ , order(md$V5, md$V4, md$V2)]
head(norm)
norm_sub <- norm[ rownames(norm) %in% genes,]
Heatmap(t(scale(t(norm_sub))), cluster_columns = FALSE)
signif(0.785, digits = 2)
signif(0.7851, digits = 2)
round(0.785, digits = 2)
round(0.7851, digits = 2)
floor(0.785, digits = 2)
round(128.051, digits = 2)
signif(128.051, digits = 2)
library(Seurat)
library(edgeR)
library(ComplexHeatmap)
WATLAS <- readRDS("C:/Users/jgsm/Downloads/WATLAS_final.Rds")
WATLAS$labels.new <- WATLAS$labels.l2
WATLAS@meta.data[ WATLAS@meta.data$labels.l1 != "Adipocyte","labels.new"] <- "Other"
WATLAS$id <- paste(WATLAS$labels.new, WATLAS$depot, sep="_")
ids <- unique(WATLAS$id)
pb <- as.data.frame(matrix(ncol=1, nrow=nrow(WATLAS)))
for (i in 1:length(ids)) {
pb[,i] <- rowMeans(WATLAS@assays$RNA@data[,colnames(WATLAS@assays$RNA@data) %in% names(which(WATLAS$id == ids[i]))])
}
rownames(pb) <- rownames(WATLAS)
colnames(pb) <- ids
Heatmap(t(scale(t(pb[ rownames(pb) %in% c("LPL","ACSL1","PPARG","LIPE","PLIN4","DGAT2","DGAT1","PLIN1","LEP","CD36"),]))), cluster_columns = FALSE, cluster_rows = FALSE)
### Adipocyte modules
ad <- subset(WATLAS, labels.l1 == "Adipocyte")
ad <- subset(ad, orig.ident %in% c("Emont","Baboza"))
ad$id <- paste(ad$labels.l2, ad$depot, ad$sample, sep="_")
ids <- unique(ad$id)
pb <- as.data.frame(matrix(ncol=1, nrow=nrow(ad)))
md <- as.data.frame(matrix(ncol=5, nrow=1))
counter <- 1
for (i in 1:length(ids)) {
if (table(ad$id)[names(table(ad$id)) == ids[i]] >= 5) {
pb[,counter] <- rowSums(ad@assays$RNA@counts[,colnames(ad@assays$RNA@counts) %in% names(which(ad$id == ids[i]))])
colnames(pb)[counter] <- ids[i]
md[counter,1] <- ids[i]
md[counter,2] <- unique(ad@meta.data[ ad@meta.data$id == ids[i],"orig.ident"])
md[counter,3] <- unique(ad@meta.data[ ad@meta.data$id == ids[i],"sample"])
md[counter,4] <- unique(ad@meta.data[ ad@meta.data$id == ids[i],"depot"])
md[counter,5] <- unique(ad@meta.data[ ad@meta.data$id == ids[i],"labels.l2"])
counter <- counter + 1
}
}
rownames(pb) <- rownames(ad)
keep <- intersect(names(which(rowSums(ad@assays$RNA@counts[,colnames(ad@assays$RNA@counts) %in% rownames(ad@meta.data[ ad@meta.data$orig.ident == "Emont",])] > 0) >= 20)), names(which(rowSums(ad@assays$RNA@counts[,colnames(ad@assays$RNA@counts) %in% rownames(ad@meta.data[ ad@meta.data$orig.ident == "Baboza",])] > 0) >= 20)))
pb <- pb[ rownames(pb) %in% keep,]
mm <- model.matrix(~ factor(md$V5) + factor(md$V4) + factor(md$V2) + 0)
keep <- filterByExpr(pb, design = mm)
pb <- pb[ keep,]
DGE <- DGEList(counts = pb, group = md$V5)
DGE <- calcNormFactors(DGE)
DGE <- estimateDisp(DGE, design = mm)
fit <- glmFit(DGE,mm)
testA <- glmLRT(fit, contrast = c(1,-1,0,0,0,0))
testB <- glmLRT(fit, contrast = c(1,0,-1,0,0,0))
testC <- glmLRT(fit, contrast = c(1,0,0,-1,0,0))
testD <- glmLRT(fit, contrast = c(1,-1/3,-1/3,-1/3,0,0))
testA <- as.data.frame(topTags(testA, n = nrow(pb), sort.by = "none"))
testB <- as.data.frame(topTags(testB, n = nrow(pb), sort.by = "none"))
testC <- as.data.frame(topTags(testC, n = nrow(pb), sort.by = "none"))
testD <- as.data.frame(topTags(testD, n = nrow(pb), sort.by = "none"))
testD <- testD[ testD$FDR <= 0.05 & testD$logFC >= log2(1.5),]
testD <- testD[ rownames(testD) %in% rownames(testA)[ testA$logFC >= log2(1.3)],]
testD <- testD[ rownames(testD) %in% rownames(testB)[ testB$logFC >= log2(1.3)],]
testD <- testD[ rownames(testD) %in% rownames(testC)[ testC$logFC >= log2(1.3)],]
testD <- rownames(testD)
norm <- as.data.frame(cpm(DGE, normalized.lib.sizes = TRUE, log = TRUE, prior.count = 1))
norm <- norm[ , order(md$V5, md$V2, md$V4)]
norm <- norm[ rownames(norm) %in% testD,]
ids <- which(md[ order(md$V5, md$V2, md$V4),][,2] == "Emont")
norm[,ids] <- t(scale(t(norm[ ,ids])))
ids <- which(md[ order(md$V5, md$V2, md$V4),][,2] == "Baboza")
norm[,ids] <- t(scale(t(norm[ ,ids])))
mod1 <- rownames(norm)
highlights <- c("CLSTN2","PGAP1", "ACER2", "LEPR", "ENPP1","CBLB","KSR1","CFAP69") #hAd5 from Emont et al.
htm1 <- Heatmap(t(as.matrix(norm)), cluster_columns = TRUE, cluster_rows = FALSE, left_annotation = rowAnnotation(Study = md[ order(md$V5, md$V2, md$V4), "V2"], Depot = md[ order(md$V5, md$V2, md$V4), "V4"]), top_annotation = HeatmapAnnotation(foo = anno_mark(at = which(rownames(norm) %in% highlights), labels = rownames(norm)[which(rownames(norm) %in% highlights)])), show_column_names = FALSE, show_column_dend = FALSE)
testA <- glmLRT(fit, contrast = c(-1,1,0,0,0,0))
testB <- glmLRT(fit, contrast = c(0,1,-1,0,0,0))
testC <- glmLRT(fit, contrast = c(0,1,0,-1,0,0))
testD <- glmLRT(fit, contrast = c(-1/3,1,-1/3,-1/3,0,0))
testA <- as.data.frame(topTags(testA, n = nrow(pb), sort.by = "none"))
testB <- as.data.frame(topTags(testB, n = nrow(pb), sort.by = "none"))
testC <- as.data.frame(topTags(testC, n = nrow(pb), sort.by = "none"))
testD <- as.data.frame(topTags(testD, n = nrow(pb), sort.by = "none"))
testD <- testD[ testD$FDR <= 0.05 & testD$logFC >= log2(1.5),]
testD <- testD[ rownames(testD) %in% rownames(testA)[ testA$logFC >= log2(1.3)],]
testD <- testD[ rownames(testD) %in% rownames(testB)[ testB$logFC >= log2(1.3)],]
testD <- testD[ rownames(testD) %in% rownames(testC)[ testC$logFC >= log2(1.3)],]
testD <- rownames(testD)
norm <- as.data.frame(cpm(DGE, normalized.lib.sizes = TRUE, log = TRUE, prior.count = 1))
norm <- norm[ , order(md$V5, md$V2, md$V4)]
norm <- norm[ rownames(norm) %in% testD,]
ids <- which(md[ order(md$V5, md$V2, md$V4),][,2] == "Emont")
norm[,ids] <- t(scale(t(norm[ ,ids])))
ids <- which(md[ order(md$V5, md$V2, md$V4),][,2] == "Baboza")
norm[,ids] <- t(scale(t(norm[ ,ids])))
mod2 <- rownames(norm)
highlights <- c("DCN","CXCL14","COL1A2","APOD","CFD","COL6A3","LUM")
htm2 <- Heatmap(t(as.matrix(norm)), cluster_columns = TRUE, cluster_rows = FALSE, left_annotation = rowAnnotation(Study = md[ order(md$V5, md$V2, md$V4), "V2"], Depot = md[ order(md$V5, md$V2, md$V4), "V4"]), top_annotation = HeatmapAnnotation(foo = anno_mark(at = which(rownames(norm) %in% highlights), labels = rownames(norm)[which(rownames(norm) %in% highlights)])), show_column_names = FALSE, show_column_dend = FALSE)
testA <- glmLRT(fit, contrast = c(-1,0,1,0,0,0))
testB <- glmLRT(fit, contrast = c(0,-1,1,0,0,0))
testC <- glmLRT(fit, contrast = c(0,0,1,-1,0,0))
testD <- glmLRT(fit, contrast = c(-1/3,-1/3,1,-1/3,0,0))
testA <- as.data.frame(topTags(testA, n = nrow(pb), sort.by = "none"))
testB <- as.data.frame(topTags(testB, n = nrow(pb), sort.by = "none"))
testC <- as.data.frame(topTags(testC, n = nrow(pb), sort.by = "none"))
testD <- as.data.frame(topTags(testD, n = nrow(pb), sort.by = "none"))
testD <- testD[ testD$FDR <= 0.05 & testD$logFC >= log2(1.5),]
testD <- testD[ rownames(testD) %in% rownames(testA)[ testA$logFC >= log2(1.3)],]
testD <- testD[ rownames(testD) %in% rownames(testB)[ testB$logFC >= log2(1.3)],]
testD <- testD[ rownames(testD) %in% rownames(testC)[ testC$logFC >= log2(1.3)],]
testD <- rownames(testD)
norm <- as.data.frame(cpm(DGE, normalized.lib.sizes = TRUE, log = TRUE, prior.count = 1))
norm <- norm[ , order(md$V5, md$V2, md$V4)]
norm <- norm[ rownames(norm) %in% testD,]
ids <- which(md[ order(md$V5, md$V2, md$V4),][,2] == "Emont")
norm[,ids] <- t(scale(t(norm[ ,ids])))
ids <- which(md[ order(md$V5, md$V2, md$V4),][,2] == "Baboza")
norm[,ids] <- t(scale(t(norm[ ,ids])))
mod3 <- rownames(norm)
highlights <- c("DGAT2","GPAM","MOGAT1","ENPP3","GYS2","FGFR2","FGF13","PRKCD","CDH20","CADM1") #hAd4 from Emont et al.
htm3 <- Heatmap(t(as.matrix(norm)), cluster_columns = TRUE, cluster_rows = FALSE, left_annotation = rowAnnotation(Study = md[ order(md$V5, md$V2, md$V4), "V2"], Depot = md[ order(md$V5, md$V2, md$V4), "V4"]), top_annotation = HeatmapAnnotation(foo = anno_mark(at = which(rownames(norm) %in% highlights), labels = rownames(norm)[which(rownames(norm) %in% highlights)])), show_column_names = FALSE, show_column_dend = FALSE)
testA <- glmLRT(fit, contrast = c(-1,0,0,1,0,0))
testB <- glmLRT(fit, contrast = c(0,-1,0,1,0,0))
testC <- glmLRT(fit, contrast = c(0,0,-1,1,0,0))
testD <- glmLRT(fit, contrast = c(-1/3,-1/3,-1/3,1,0,0))
testA <- as.data.frame(topTags(testA, n = nrow(pb), sort.by = "none"))
testB <- as.data.frame(topTags(testB, n = nrow(pb), sort.by = "none"))
testC <- as.data.frame(topTags(testC, n = nrow(pb), sort.by = "none"))
testD <- as.data.frame(topTags(testD, n = nrow(pb), sort.by = "none"))
testD <- testD[ testD$FDR <= 0.05 & testD$logFC >= log2(1.5),]
testD <- testD[ rownames(testD) %in% rownames(testA)[ testA$logFC >= log2(1.3)],]
testD <- testD[ rownames(testD) %in% rownames(testB)[ testB$logFC >= log2(1.3)],]
testD <- testD[ rownames(testD) %in% rownames(testC)[ testC$logFC >= log2(1.3)],]
testD <- rownames(testD)
norm <- as.data.frame(cpm(DGE, normalized.lib.sizes = TRUE, log = TRUE, prior.count = 1))
norm <- norm[ , order(md$V5, md$V2, md$V4)]
norm <- norm[ rownames(norm) %in% testD,]
ids <- which(md[ order(md$V5, md$V2, md$V4),][,2] == "Emont")
norm[,ids] <- t(scale(t(norm[ ,ids])))
ids <- which(md[ order(md$V5, md$V2, md$V4),][,2] == "Baboza")
norm[,ids] <- t(scale(t(norm[ ,ids])))
mod4 <- rownames(norm)
highlights <- c("PRSS23", "PDE5A", "ADIPOQ-AS1","SULT1C3","SULT2B1","SULT1C2","SULT1C4","GRIN2A","GRIN3A","GRIN2C") #hAd 3 from Emont
htm4 <- Heatmap(t(as.matrix(norm)), cluster_columns = TRUE, cluster_rows = FALSE, left_annotation = rowAnnotation(Study = md[ order(md$V5, md$V2, md$V4), "V2"], Depot = md[ order(md$V5, md$V2, md$V4), "V4"]), top_annotation = HeatmapAnnotation(foo = anno_mark(at = which(rownames(norm) %in% highlights), labels = rownames(norm)[which(rownames(norm) %in% highlights)])), show_column_names = FALSE, show_column_dend = FALSE)
htm1 + htm2 + htm3 + htm4
ad_emont <- subset(ad, orig.ident == "Emont")
ad_baboza <- subset(ad, orig.ident == "Baboza")
ad_emont <- UCell::AddModuleScore_UCell(ad_emont, features = list(mod1 = mod1, mod2 = mod2, mod3 = mod3, mod4 = mod4))
ad_baboza <- UCell::AddModuleScore_UCell(ad_baboza, features = list(mod1 = mod1, mod2 = mod2, mod3 = mod3, mod4 = mod4))
md_emont <- ad_emont@meta.data
md_baboza <- ad_baboza@meta.data
md_emont$id <- paste(md_emont$labels.l2, md_emont$depot, md_emont$orig.ident, sep="_")
md_emont$mod1_UCell <- scale(md_emont$mod1_UCell)
md_emont$mod2_UCell <- scale(md_emont$mod2_UCell)
md_emont$mod3_UCell <- scale(md_emont$mod3_UCell)
md_emont$mod4_UCell <- scale(md_emont$mod4_UCell)
md_baboza$id <- paste(md_baboza$labels.l2, md_baboza$depot, md_baboza$orig.ident, sep="_")
md_baboza$mod1_UCell <- scale(md_baboza$mod1_UCell)
md_baboza$mod2_UCell <- scale(md_baboza$mod2_UCell)
md_baboza$mod3_UCell <- scale(md_baboza$mod3_UCell)
md_baboza$mod4_UCell <- scale(md_baboza$mod4_UCell)
md <- cbind(md_baboza, md_emont)
md <- rbind(md_baboza, md_emont)
modules <- aggregate(md[,c("mod1_UCell", "mod2_UCell", "mod3_UCell","mod4_UCell")], by = list(md$id), FUN="median")
rownames(modules) <- modules[,1]
modules <- modules[,-1]
Heatmap(as.matrix(modules), cluster_rows = FALSE, cluster_columns = FALSE)
ad <- UCell::AddModuleScore_UCell(ad, features = list(mod1 = mod1, mod2 = mod2, mod3 = mod3, mod4 = mod4))
md <- ad@meta.data
md$id <- paste(md$labels.l2, md$depot, md$orig.ident, sep="_")
md$mod1_UCell <- scale(md$mod1_UCell)
md$mod2_UCell <- scale(md$mod2_UCell)
md$mod3_UCell <- scale(md$mod3_UCell)
md$mod4_UCell <- scale(md$mod4_UCell)
modules <- aggregate(md[,c("mod1_UCell", "mod2_UCell", "mod3_UCell","mod4_UCell")], by = list(md$id), FUN="median")
rownames(modules) <- modules[,1]
modules <- modules[,-1]
Heatmap(as.matrix(modules), cluster_rows = FALSE, cluster_columns = FALSE)
Heatmap(t(scale(t(pb[ rownames(pb) %in% c("LPL","ACSL1","PPARG","LIPE","PLIN4","DGAT2","DGAT1","PLIN1","LEP","CD36"),]))), cluster_columns = FALSE, cluster_rows = FALSE)
WATLAS$labels.new <- WATLAS$labels.l2
WATLAS@meta.data[ WATLAS@meta.data$labels.l1 != "Adipocyte","labels.new"] <- "Other"
WATLAS$id <- paste(WATLAS$labels.new, WATLAS$depot, sep="_")
ids <- unique(WATLAS$id)
pb <- as.data.frame(matrix(ncol=1, nrow=nrow(WATLAS)))
for (i in 1:length(ids)) {
pb[,i] <- rowMeans(WATLAS@assays$RNA@data[,colnames(WATLAS@assays$RNA@data) %in% names(which(WATLAS$id == ids[i]))])
}
rownames(pb) <- rownames(WATLAS)
colnames(pb) <- ids
Heatmap(t(scale(t(pb[ rownames(pb) %in% c("LPL","ACSL1","PPARG","LIPE","PLIN4","DGAT2","DGAT1","PLIN1","LEP","CD36"),]))), cluster_columns = FALSE, cluster_rows = FALSE)
library(swirl)
library(swirlify)
library(BiocManager)
detach("package:BiocManager", unload = TRUE)
setwd("C:/Users/jgsm/OneDrive - Syddansk Universitet/Teaching/2023/BMB511/Exercises/Swirl/BMB511/DNA_sequence_alignment")
library(BiocManager)
sessionInfo()
(.packages())
(.packages()) == "BiocManager"
any((.packages()) == "BiocManager")
library(BiocManager)
demo_lesson()
install.packages("BiocManager")
library(BiocManager)
bye()
library(BiocManager)
swirl()
install.packages("BiocManager")
library(BiocManager)
bye()
library(BiocManager)
swirl()
bye()
library(BiocManager)
swirl()
install.packages("BiocManager")
library(BiocManager)
info()
bye()
library(BiocManager)
.packages()
.packages()
(.packages())
sessionInfo()
str(sessionInfo())
summary(sessionInfo())
loadedNamespaces()
loadedNamespaces() %in% "BiocManager"
loadedNamespaces() %in% "BiocManager"
library(swirl)
library(swirlify)
library(BiocManager)
swirl()
install.packages("BiocManager")
bye()
detach("package:BiocManager", unload = TRUE)
install.packages("BiocManager")
detach("package:BiocManager", unload = TRUE)
library(BiocManager)
demo_lesson()
install.packages("BiocManager")
library("BiocManager")
skip()
install("Biostrings", update = FALSE)
library(Biostrings)
DNAString
?DNAString
DNAString("CAGATTG")
DNAString("CAGATTGCXKA")
?AnswerTests
DNA_ALPHABET
DNA_ALPHABET
?AnswerTests
reference <- DNAString("GTCCATCTGTAGTAGATCGTCCATGACTGCGATACAAGTTACCTT")
reference
demo_lesson(from = 10)
demo_lesson(from = 8)
demo_lesson(from = 8)
demo_lesson(from = 8)
skip()
skip()
skip()
skip()
demo_lesson()
demo_lesson()
skip()
library(BiocManager)
install(Biostrings, update=FALSE)
install("Biostrings", update=FALSE)
bye()
swirlify
swirlify()
?install
install
BiocManager:::.install()
?BiocManager:::.install()
BiocManager::.repositories_site_repository(site_repository)
BiocManager:::.repositories_site_repository(site_repository)
BiocManager:::.repositories_site_repository()
BiocManager:::.repositories_site_repository(character())
BiocManager:::.repositories(site_repository, version = version, ...)
BiocManager:::.repositories(site_repository, version = "3.17")
BiocManager:::.repositories(character(), version = "3.17")
?install.packages
install.packages("Biostrings", repos = "https://bioconductor.org/packages/3.17/bioc")
install.packages("Biostrings", repos = "https://bioconductor.org/packages/3.16/bioc")
install.packages("Biostrings", repos = "https://bioconductor.org/packages/3.15/bioc")
reference
variant <- DNAString("GTCCATGACACTGGTCGTCCATGGACTGCGATACAAGTTACCTT")
variants
variant
?nucleotideSubstitutionMatrix
?nucleotideSubstitutionMatrix
demo_lesson()
skip()
library(BiocManager)
skip()
"alreadydone"
library(Biostrings)
?DNAStr
?DNAString
DNA_ALPHABET
reference <- DNAString("GTCCATCTGTAGTAGATCGTCCATGACTGCGATACAAGTTACCTT")
variant <- DNAStr
variant <- DNAString('GTCCATGACACTGGTCGTCCATGGACTGCGATACAAGTTACCTT')
reference
variant
reference
variant
?nucleotideSubstitutionMatrix
scoring <- nucleotideSubstitutionMatrix(match = 1, mismatch = -1, baseOnly = TRUE)
scoring
install("Biostrings", force = TRUE, update = FALSE)
if (any(loadedNamespaces() %in% "Biostrings")) { detach("package:Biostrings", unload = TRUE) }
install("Biostrings", force = TRUE, update = FALSE)
library(Biostrings)
?pairwiseAlignment
demo_lesson()
skip()
skip()
skip()
install("Biostrings")
demo_lesson(from = 5)
skip()
"alreadydone"
library(Biostrings)
skip()
DNA_ALPHABET
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
"type"
'type'
type
demo_lesson()
demo_lesson()
skip()
skip()
skip()
"alreadydone"
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
nxt()
skip()
bye()
demo_lesson()
skip()
skip()
skip()
"alreadydone"
"alreadydone"
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
?DNAStringSet
all_variants <- c("GTCCATGACACTGGTCGTCCATGGACTGCGATACAAGTTACCTT", "GTCCATCTGACTGGTCGTCCATGGACTGCGATACAAGTTACCTT",
"GTCCATGACACTCCTCGTCCATGGACTGCGATACAAGTTACCTT",
"GTCCATCTCACTCCTCGTCCATGGACTGCGATACAAGTTACCTT",
"GTCCATCTGACTGGTCGTCCATGGACTGCGATACAAGTTACCTT",
"GTCCATCTGACTCCTCGTCCATGGACTGCGATACAAGTTACCTT",
"GTCCATCACACTGGTCGTCCATGGACTGCGATACAAGTTACCTT",
"GTCCATCACACTCCTCGTCCATGGACTGCGATACAAGTTACCTT",
"GTCCATCAGACTCCTCGTCCATGGACTGCGATACAAGTTACCTT",
"GTCCATGAGACTGGTCGTCCATGGACTGCGATACAAGTTACCTT")
variants <- DNAStringSet(all_variants)
variants
pairwiseAlignment(pattern = variants, subject = reference, type = "global", substitutionMatrix = scoring, gapOpening = 2, gapExtension = 2)
pairwiseAlignment(pattern = variants, subject = reference, type = "global", substitutionMatrix = scoring, gapOpening = 2, gapExtension = 2)
alignment <- pairwiseAlignment(pattern = variants, subject = reference, type = "global", substitutionMatrix = scoring, gapOpening = 2, gapExtension = 2)
alignedSubject(alignment)
alignedPattern(alignment)
enhancer <- DNAString("GTCCTAGATACTAGAGTCGTCTCCTCTGGTCGTCTAGCGAGCGGTTCAAGTTACCTTGATAGACACAGATACAGTTTGAGATACATAGACACATAGAGTAGAGACACATGA")
pairwiseAlignment(pattern = variant, subject = enhancer, type = "local", substitutionMatrix = scoring, gapOpening = 2, gapExtension = 2)
pairwiseAlignment(pattern = variant, subject = enhancer, type = "global", substitutionMatrix = scoring, gapOpening = 2, gapExtension = 2)
demo_lesson()
skip()
bye()
demo_lesson()
skip()
skip()
skip()
"alreadydone"
"alreadydone"
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
add_to_manifest()
matrix(1, ncol=15, nrow=100)
matrix(1, ncol=15, nrow=100) %*% matrix(1, ncol=1500, nrow=100)
t(matrix(1, ncol=15, nrow=100)) %*% t(matrix(1, ncol=1500, nrow=100))
matrix(1, ncol=15, nrow=100) %*% t(matrix(1, ncol=1500, nrow=100))
t(matrix(1, ncol=15, nrow=100)) %*% t(matrix(1, ncol=100, nrow=1500))
t(matrix(1, ncol=15, nrow=100)) %*% t(matrix(1, ncol=100, nrow=1500))
matrix(1, ncol=15, nrow=100) %*% matrix(1, ncol=100, nrow=1500)
t(matrix(1, ncol=15, nrow=100)) %*% t(matrix(1, ncol=100, nrow=1500))
t(matrix(1, ncol=15, nrow=100)) %*% t(matrix(1, ncol=100, nrow=1500))
X <- t(matrix(1, ncol=100, nrow=1500))
X %*% t(X)
dim(X %*% t(X))
X <- t(matrix(1, ncol=100, nrow=1500))
head(X)
X <- t(matrix(1, ncol=100, nrow=1500))
U <- t(matrix(1, ncol=15, nrow=100))
